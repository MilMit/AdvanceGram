import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

import java.nio.file.Paths

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

configurations.all {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim().substring(0, 8)
}

def getGitDate = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'show', '-s', '--format=%ct'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().replace("feature/", "").trim()
}

def getVersionPBetaName = { ->
    def version_name = APP_VERSION_NAME.split(" ")[0]
    return version_name + " #" + getGitBranch()
}

def isWindows = DefaultNativePlatform.currentOperatingSystem.toFamilyName() == OperatingSystemFamily.WINDOWS

dependencies {
    // AndroidX dependencies
    implementation 'androidx.core:core:1.9.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.5'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.sharetarget:sharetarget:1.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    compileOnly 'org.checkerframework:checker-qual:3.25.0'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.5'

    // Firebase dependencies
    implementation 'com.google.firebase:firebase-messaging:23.1.0'
    implementation 'com.google.firebase:firebase-config:21.2.0'
    implementation 'com.google.firebase:firebase-datatransport:18.1.7'
    implementation 'com.google.firebase:firebase-appindexing:20.0.0'

    // Google Play Services dependencies
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-auth:20.4.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-wearable:18.0.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.gms:play-services-wallet:19.1.0'

    //noinspection GradleDependency
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6' // NOT YET SUPPORTED BY TELEGRAM
    //noinspection GradleDependency
    implementation 'com.stripe:stripe-android:2.0.2' // NOT YET SUPPORTED BY TELEGRAM
    implementation 'com.google.mlkit:language-id:17.0.4'
    implementation 'com.android.billingclient:billing:5.1.0'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'org.codeberg.qwerty287:prism4j:003cb5e380'

    // CameraX Implementation
    implementation "androidx.camera:camera-camera2:1.3.0-alpha02"
    implementation "androidx.camera:camera-core:1.3.0-alpha02"
    implementation "androidx.camera:camera-extensions:1.3.0-alpha02"
    implementation "androidx.camera:camera-lifecycle:1.3.0-alpha02"
    implementation "androidx.camera:camera-view:1.3.0-alpha02"
    implementation "androidx.camera:camera-video:1.3.0-alpha02"
    implementation 'androidx.interpolator:interpolator:1.0.0'

    // GOOGLE PLAY UPDATE CHECKER
    implementation 'com.google.android.play:core:1.10.3'

    // NATIVE LIBS
    implementation 'com.getkeepsafe.relinker:relinker:1.4.5'

    // MilMit
    implementation "cn.hutool:hutool-core:5.7.13"
    implementation "cn.hutool:hutool-crypto:5.7.13"
    implementation 'cn.hutool:hutool-http:5.7.5'
    implementation "org.dizitart:nitrite:3.4.3"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1"
    implementation 'dnsjava:dnsjava:3.4.1'
    compileOnly 'org.yaml:snakeyaml:1.29'
    implementation("org.yaml:snakeyaml:1.29")
    implementation 'androidx.core:core:1.9.0'
    implementation "androidx.core:core-ktx:1.9.0"
}

android {
    namespace 'org.telegram.messenger'

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    buildFeatures {
        prefab true
    }

    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    buildTypes {
        debug {
            resValue "string", "BuildAppName", "@string/AppNameBeta"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
            buildConfigField "String", "BUILD_VERSION_STRING", "\"${getVersionPBetaName()}\""
        }

        pbeta {
            resValue "string", "BuildAppName", "@string/AppNameBeta"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
            buildConfigField "String", "BUILD_VERSION_STRING", "\"${getVersionPBetaName()}\""
        }

        release {
            resValue "string", "BuildAppName", "@string/AppName"
        }
    }

    defaultConfig {
        buildConfigField "String", "GIT_COMMIT_HASH", "\"${getGitHash()}\""
        buildConfigField "Long", "GIT_COMMIT_DATE", "${getGitDate()}L"
        buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
        buildConfigField "int", "BUILD_VERSION", "${APP_VERSION_CODE}"
        buildConfigField "String", "BUILD_VERSION_STRING", "\"${APP_VERSION_NAME}\""
        buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", "${isWindows}"

        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-21'
                var file = Paths.get("${System.getProperty("user.dir")}${File.separator}Tools${File.separator}ccache${if (isWindows) ".exe" else ""}").toFile()
                if (file.exists()) {
                    println("Using ccache ${file.getAbsolutePath()}")
                    arguments += "-DANDROID_CCACHE=${file.getAbsolutePath()}"
                } else {
                    throw new Exception("ccache not found")
                }
            }
        }
    }
}